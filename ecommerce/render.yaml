# Render Blueprint Specification
# Docs: https://render.com/docs/infrastructure-as-code
# This file defines the infrastructure (services & databases) for Project Nexus.

databases:
  - name: nexus-postgres
    databaseName: ecommerce
    user: ecommerce
    plan: free

services:
  - type: web
    name: nexus-web
    runtime: python
    plan: free
    autoDeploy: true
    buildCommand: |
      pip install -r requirements.txt
      python manage.py collectstatic --noinput --verbosity 0
      python manage.py migrate --noinput
    startCommand: gunicorn ecommerce.wsgi:application --bind 0.0.0.0:$PORT --workers 3 --timeout 60 --access-logfile - --error-logfile -
    healthCheckPath: /health/
    envVars:
      - key: DJANGO_SECRET_KEY
        value: REPLACE_WITH_SECURE_SECRET
      - key: DEBUG
        value: "0"
      - key: ALLOWED_HOSTS
        value: "nexus-web.onrender.com,localhost,127.0.0.1"
      - key: SITE_URL
        value: https://nexus-web.onrender.com
      - key: DATABASE_URL
        fromDatabase:
          name: nexus-postgres
          property: connectionString
      # Postgres discrete variables (optional if DATABASE_URL present)
      - key: POSTGRES_DB
        fromDatabase:
          name: nexus-postgres
          property: database
      - key: POSTGRES_USER
        fromDatabase:
          name: nexus-postgres
          property: user
      - key: POSTGRES_PASSWORD
        fromDatabase:
          name: nexus-postgres
          property: password
      - key: POSTGRES_HOST
        fromDatabase:
          name: nexus-postgres
          property: host
      - key: POSTGRES_PORT
        fromDatabase:
          name: nexus-postgres
          property: port

      # Email configuration (placeholders â€“ set real creds in dashboard)
      - key: EMAIL_BACKEND
        value: django.core.mail.backends.smtp.EmailBackend
      - key: EMAIL_HOST
        value: smtp.gmail.com
      - key: EMAIL_PORT
        value: "587"
      - key: EMAIL_USE_TLS
        value: "true"
      - key: EMAIL_USE_SSL
        value: "false"
      - key: EMAIL_HOST_USER
        value: ""
      - key: EMAIL_HOST_PASSWORD
        value: ""
      - key: DEFAULT_FROM_EMAIL
        value: ""
      - key: EMAIL_TIMEOUT
        value: "30"

      # Celery / async task execution
      - key: CELERY_EAGER
        value: "true"  # true = inline tasks; set false AND add a worker service to enable real async
      - key: CELERY_BROKER_URL
        value: ""  # e.g. rediss://user:pass@host:port/1 (leave blank if using eager mode only)
      - key: CELERY_RESULT_BACKEND
        value: ""  # e.g. rediss://user:pass@host:port/2
      - key: USE_DB_BEAT
        value: "0"  # set 1 if you later add django-celery-beat + separate beat service

      # Valkey / Redis external (if you prefer managed Valkey over Render Redis add-on)
      - key: VALKEY_URL
        value: ""  # rediss://default:password@host:port
      - key: VALKEY_HOST
        value: ""
      - key: VALKEY_PORT
        value: ""
      - key: VALKEY_PASSWORD
        value: ""

      # Gunicorn tuning & security
      - key: GUNICORN_WORKERS
        value: "3"
      - key: GUNICORN_TIMEOUT
        value: "60"
      - key: SECURE_HSTS_SECONDS
        value: "31536000"
      - key: DB_CONN_MAX_AGE
        value: "600"

# Basic minimal blueprint: single web service + Postgres. Inline Celery tasks.
# To scale later:
#  - Add a Redis service and separate worker: change CELERY_EAGER to false.
#  - Add periodic tasks: create a beat worker service.
#  - Add email credentials: set EMAIL_BACKEND & related vars.
