"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import ssl
from celery.schedules import crontab
import environ
import dj_database_url
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

from dotenv import load_dotenv
import os
import certifi

load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', '1') in ('1', 'true', 'True')

# ALLOWED_HOSTS: provide a safe fallback so missing env var doesn't crash settings import.
_raw_hosts = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [h.strip() for h in _raw_hosts.split(',') if h.strip()]

# PythonAnywhere convenience: if PYTHONANYWHERE_DOMAIN (e.g. yourusername.pythonanywhere.com) is set, ensure it's allowed.
if pyany_domain := os.getenv('PYTHONANYWHERE_DOMAIN'):
    if pyany_domain not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(pyany_domain)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'products',
    'payments',
    'rest_framework',
    # NOTE: Do not list 'celery' here; Celery is a library, not a Django app. Including it can
    # create circular import scenarios where Python thinks your project celery.py is the library.
    'django_celery_beat',
    'django_celery_results',
    'corsheaders',
    'django_filters',
    'drf_yasg',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_CONN_MAX_AGE = int(os.getenv('DB_CONN_MAX_AGE', '60'))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'ecommerce'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
        'CONN_MAX_AGE': DB_CONN_MAX_AGE,
    }
}

"""DATABASE_URL precedence
If DATABASE_URL is provided it overrides the discrete POSTGRES_* vars.
Supported examples:
  postgres://user:pass@host:5432/dbname
  postgresql://user:pass@host:5432/dbname?sslmode=require

Optional env flags:
  DB_SSL_REQUIRE=1 (forces sslmode=require if not already in URL)
  DB_CONN_MAX_AGE (pool persistence seconds; default 60)

If both a query param sslmode and DB_SSL_REQUIRE are present, the URL's query wins.
"""
if url := os.getenv('INTERNAL_DATABASE_URL'):
    ssl_require_flag = os.getenv('DB_SSL_REQUIRE', '0').lower() in ('1', 'true', 'yes')
    parsed = dj_database_url.parse(url, conn_max_age=DB_CONN_MAX_AGE, ssl_require=ssl_require_flag)
    # Allow explicit disabling of ssl for local tunnels even if DB_SSL_REQUIRE was set
    if os.getenv('DB_SSL_DISABLE', '0').lower() in ('1', 'true', 'yes'):
        opts = parsed.get('OPTIONS', {})
        if 'sslmode' in opts:
            opts.pop('sslmode')
        parsed['OPTIONS'] = opts
    DATABASES['default'] = parsed


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DEFAULT_USER_MODEL = 'users.User'
AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'staticfiles']  # only source dirs
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis (local by default). Override via REDIS_URL_BASE or CELERY_* env vars.
REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
REDIS_DB_CACHE = os.getenv('REDIS_DB_CACHE', '0')
REDIS_DB_BROKER = os.getenv('REDIS_DB_BROKER', '1')
REDIS_DB_RESULT = os.getenv('REDIS_DB_RESULT', '2')
REDIS_URL_BASE = os.getenv('REDIS_URL_BASE', f'redis://{REDIS_HOST}:{REDIS_PORT}')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"rediss://default:{os.getenv('VALKEY_PASSWORD')}@{os.getenv('VALKEY_HOST')}:{os.getenv('VALKEY_PORT')}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.getenv('VALKEY_PASSWORD'),
            "SSL": True,  # important for Aiven Valkey
        }
    }
}
 # Session configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', f"{REDIS_URL_BASE}/{REDIS_DB_BROKER}")
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', f"{REDIS_URL_BASE}/{REDIS_DB_RESULT}")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Recommended for periodic task consistency

CELERY_TIMEZONE = TIME_ZONE
"""Celery periodic tasks (settings-based scheduler).

We previously referenced non-existent modules (apps.orders / apps.inventory). Those
entries caused import errors when using the simple beat scheduler. This cleaned
schedule only references tasks that actually exist in `notifications.tasks`.

NOTE:
If you enable the django-celery-beat DatabaseScheduler (USE_DB_BEAT=true), these
settings are ignored and you must configure periodic tasks via the admin UI or
custom migration. See `ecommerce/celery.py` for the switch logic.
"""
CELERY_BEAT_SCHEDULE = {
    'process-abandoned-carts': {
        'task': 'notifications.tasks.process_abandoned_carts',
        'schedule': 3600.0,  # Every hour; harmless if Cart model not implemented
    },
    'low-stock-alerts': {
        'task': 'notifications.tasks.update_low_stocks_alerts',  # function name has plural 'stocks'
        'schedule': 1800.0,  # Every 30 minutes
    },
}

# In development, you can execute Celery tasks locally without a broker
if DEBUG and os.getenv('CELERY_EAGER', 'true').lower() == 'true':
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = False

# If deploying on a platform without a readily available Redis/Valkey (e.g. PythonAnywhere free tier) and
# no broker URL is configured, fall back to eager mode to avoid runtime connection errors.
if not DEBUG and not os.getenv('CELERY_BROKER_URL') and 'CELERY_TASK_ALWAYS_EAGER' not in globals():
    # Conservative fallback: process tasks inline so user flows (like email verification) still work.
    CELERY_TASK_ALWAYS_EAGER = True  # type: ignore
    CELERY_TASK_EAGER_PROPAGATES = False  # type: ignore

# Django REST Framework defaults
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'ecommerce.pagination.StandardResultsSetPagination',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'users': '500/hour',
        'payments': '300/hour',
        'products': '800/hour',
    },
}

# drf-spectacular (OpenAPI) settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'ALX Project Nexus API',
    'DESCRIPTION': 'OpenAPI schema for the alx-project-nexus e-commerce backend',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Email configuration (with safe defaults). For local debug you can set EMAIL_BACKEND to console.
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
# Accept either EMAIL_HOST_USER or legacy EMAIL_ADDRESS
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') or os.getenv('EMAIL_ADDRESS', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_TIMEOUT = int(os.getenv('EMAIL_TIMEOUT', '30'))
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER or 'noreply@example.com')
ACCOUNT_EMAIL_SUBJECT_PREFIX = os.getenv('ACCOUNT_EMAIL_SUBJECT_PREFIX', '')
EMAIL_SSL_CERTFILE = certifi.where()

# Optional insecure certificate skipping backend (DEV ONLY). Enable by setting EMAIL_INSECURE_SKIP_VERIFY=true
if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    try:
        from .email_backends import InsecureSMTPEmailBackend  # type: ignore
        if os.getenv('EMAIL_INSECURE_SKIP_VERIFY', 'false').lower() == 'true':  # pragma: no cover (env dependent)
            EMAIL_BACKEND = 'ecommerce.email_backends.InsecureSMTPEmailBackend'
    except Exception:  # pragma: no cover - fail closed
        pass

# Control whether verification email task suppresses final exceptions.
EMAIL_SILENT_FAIL = os.getenv('EMAIL_SILENT_FAIL', 'true' if DEBUG else 'false').lower() == 'true'

# Basic logging to surface email sending issues & Celery task logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.core.mail': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'notifications.tasks': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    }
}

# Base URL used to build absolute links in emails
SITE_URL = os.getenv('SITE_URL', 'http://127.0.0.1:8000')

# Render.com deployment adjustments
if os.getenv('RENDER'):  # Render sets RENDER=1 and provides RENDER_EXTERNAL_URL
    external_url = os.getenv('RENDER_EXTERNAL_URL')  # e.g. https://your-service.onrender.com
    if external_url:
        host = external_url.replace('https://', '').replace('http://', '').rstrip('/')
        if host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)
        # Trust proxy headers for SSL
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # CSRF trusted origins
    RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
    csrf_origins = []
    if external_url:
        csrf_origins.append(external_url)
    if RENDER_EXTERNAL_HOSTNAME:
        csrf_origins.append(f'https://{RENDER_EXTERNAL_HOSTNAME}')
    if csrf_origins:
        CSRF_TRUSTED_ORIGINS = csrf_origins
    # If REDIS_URL provided by Render redis add-on unify usage
    if redis_url := os.getenv('REDIS_URL'):
        # Use the single redis instance for cache, broker & results (different DB indexes optional)
        CACHES['default']['LOCATION'] = f"{redis_url}/{REDIS_DB_CACHE}"
        CELERY_BROKER_URL = f"{redis_url}/{REDIS_DB_BROKER}"
        CELERY_RESULT_BACKEND = f"{redis_url}/{REDIS_DB_RESULT}"

# Production security hardening (only applied when DEBUG is False)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '63072000'))  # 2 years
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    # Browser XSS filter header (retained for older browsers; modern CSP would be next step)
    SECURE_BROWSER_XSS_FILTER = True  # type: ignore[attr-defined]
    X_FRAME_OPTIONS = 'DENY'
    # If behind reverse proxy (Render) this is already set above when RENDER present.

# Optional: allow toggling gunicorn worker count / timeout via env for docs
GUNICORN_WORKERS = int(os.getenv('GUNICORN_WORKERS', '3'))
GUNICORN_TIMEOUT = int(os.getenv('GUNICORN_TIMEOUT', '60'))
